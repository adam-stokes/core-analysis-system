#!/usr/bin/env python
# (c) 2011 AJS Consulting Group
# <sleekfmk - satin>
# 

import os
from distutils.dir_util import copy_tree, remove_tree
import sys
import argparse
import subprocess
import uuid

PLATFORM = sys.platform

sleekfmk_path = os.path.abspath(os.path.dirname(__file__))
sys.path.insert(0,sleekfmk_path)

import site
site.addsitedir("%s/env/lib/python2.7/site-packages" % os.path.abspath(os.path.dirname(__file__)))

from app.system.log import logger as _slk

# load required pkg list
from app.system import req_pkgs
from app.conf import more_req_pkgs

package_includes = req_pkgs + more_req_pkgs

def install_pkgs():
    _slk.info("Setting virtualenv")
    if not os.path.isdir(os.path.join(sleekfmk_path,'env')):
        cmd = ['virtualenv', '--no-site-packages', 'env']
        subprocess.call(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    cmd = ['source env/bin/activate && pip install --upgrade %s' % (" ".join(req_pkgs),)]
    subprocess.call(cmd, shell=True)
    
def build_project(name):
    # Project required
    _slk.info("Project %s creation" % (name,))
    try:
        copy_tree(sleekfmk_path, name)
    except OSError, e:
        _slk.error("failed to copy project skeleton to: %s" % (e,))
        #sys.exit(1)
    os.chdir(name)
    # Cleanup dvcs
    if os.path.isfile('.hg'):
        remove_tree('.hg')
    if os.path.isfile('.hgignore'):
        os.unlink('.hgignore')
    if os.path.isdir(name):
        while None:
            overwrite_dir = raw_input("Path exists, update modules? (Y/N) ")
            if "Y" in overwrite_dir.upper():
                install_pkgs()
            elif "N" in overwrite_dir.upper():
                _slk.info("Not installing modules")
                return
            else:
                _slk.warning("Must enter (Y/N)")
    else:
        install_pkgs()
    _slk.info("Completed Project setup")
    return
    
if __name__=="__main__":
    project_name = None
    if (not len(sys.argv) > 1 and not os.path.isdir(os.path.join(sleekfmk_path, 'env'))):
        _slk.warning("Unable to continue, either create a new project with 'new project'\n \
                         or install a virtual environment with 'install'")
        sys.exit(1)
    if (len(sys.argv) == 3 and "new" in sys.argv):
        while not project_name:
            project_name = raw_input("Create project %s? " % (sys.argv[2]))
            if "Y" in project_name or "y" in project_name:
                build_project(sys.argv[2])
            elif "N" in project_name or "n" in project_name:
                _slk.warning("Abort project creation")
                sys.exit(1)
            else:
                _slk.warning("Must enter (Y/y) or (N/n)")
                project_name = None
    elif (len(sys.argv) == 2 and "install" in sys.argv):
        install_pkgs()
    else:
        from app.system.interface import RunApp
        sys.exit(RunApp(sleekfmk_path).run())
    sys.exit(1)

